[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "fastapi-logistics-api"
version = "1.0.0"
description = "Logistics Order Management API"
readme = "README.md"
requires-python = ">=3.11"

# ============================================================================
# Black Configuration (Code Formatting)
# ============================================================================
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
  | alembic
)/
'''

# ============================================================================
# isort Configuration (Import Sorting)
# ============================================================================
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/migrations/*", "*/alembic/*"]

# ============================================================================
# Ruff Configuration (Fast Linter)
# ============================================================================
[tool.ruff]
line-length = 100
target-version = "py311"

# Exclude a variety of commonly ignored directories
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    "venv",
    "alembic",
    "migrations",
    "__pycache__",
]

[tool.ruff.lint]
# Enable specific rule sets
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate (commented code)
    "PL",     # pylint
    "RUF",    # ruff-specific rules
]

# Ignore specific rules
ignore = [
    "E501",   # line too long (handled by black)
    "B008",   # do not perform function call in argument defaults (FastAPI Depends)
    "PLR0913", # too many arguments
    "PLR2004", # magic value used in comparison
]

# Allow autofix for all enabled rules (when `--fix`) is provided
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
# Ignore specific rules in test files
"tests/**/*.py" = [
    "ARG001",  # unused function argument
    "PLR2004", # magic value comparison
    "S101",    # use of assert
]

# Ignore imports in __init__.py
"__init__.py" = ["F401"]

# ============================================================================
# MyPy Configuration (Type Checking)
# ============================================================================
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Set to true for stricter checking
ignore_missing_imports = true
plugins = ["pydantic.mypy", "sqlalchemy.ext.mypy.plugin"]

# Directories to exclude
exclude = [
    "alembic/",
    "migrations/",
    ".venv/",
    "venv/",
]

# Per-module configuration
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "alembic.*"
ignore_errors = true

# ============================================================================
# Pytest Configuration (Testing)
# ============================================================================
[tool.pytest.ini_options]
pythonpath = ["."]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

# Output and behavior
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "--tb=short",
    "--maxfail=10",
    "-ra",                    # Show summary of all test outcomes
    "--cov=app",              # Coverage for app directory
    "--cov-report=term-missing", # Show missing lines in terminal
    "--cov-report=html",      # Generate HTML coverage report
    "--cov-report=xml",       # Generate XML coverage report (for CI)
]

# Test markers
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "smoke: Smoke tests",
    "slow: Slow running tests",
    "api: API endpoint tests",
    "database: Database related tests",
    "auth: Authentication tests",
    "orders: Order related tests",
    "drivers: Driver related tests",
    "terminals: Terminal related tests",
    "vehicles: Vehicle related tests",
]

# ============================================================================
# Coverage Configuration
# ============================================================================
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/env/*",
    "*/migrations/*",
    "*/alembic/*",
    "*/conftest.py",
    "*/test_*.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
show_missing = true
precision = 2
fail_under = 70  # Fail if coverage is below 70%

[tool.coverage.html]
directory = "htmlcov"

# ============================================================================
# Bandit Configuration (Security Scanning)
# ============================================================================
[tool.bandit]
exclude_dirs = [
    "/tests/",
    "/alembic/",
    "/migrations/",
    "/.venv/",
]
skips = [
    "B101",  # assert_used - we use asserts in tests
]
