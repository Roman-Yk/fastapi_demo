services:
  # Frontend React application - directly accessible on port 3000
  frontend:
    build:
      context: ./frontend/demo-app
      dockerfile: Dockerfile.dev
    image: "fastapi-demo-frontend:dev"
    restart: always
    volumes:
      - ./frontend/demo-app:/app  # Mount source code for hot reload
      - /app/node_modules  # Persist node_modules in container
    environment:
      - VITE_API_BASE_URL=http://localhost:8000/api/v1  # Direct backend connection
      - CHOKIDAR_USEPOLLING=true  # Enable file watching in Docker
    ports:
      - 3000:3000  # Access frontend at http://localhost:3000
    depends_on:
      - backend
    networks:
      - default

  # FastAPI backend application
  backend:
    tty: true
    restart: always
    build: ./backend
    image: "fastapi-demo-backend:latest"
    volumes:
      - ./backend:/app  # Mount code for hot reload
      - ./files:/app/files  # Persist uploaded files
    env_file:
      - ./backend/.env
    ports:
      - 8000:8000  # Access API at http://localhost:8000
                   # API docs at http://localhost:8000/docs
    depends_on:
      - database
      - redis
    networks:
      - default

  # PostgreSQL database
  database:
    image: postgres:15-alpine
    env_file: ./backend/.env
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Using original path to preserve existing data
    ports:
      - 5432:5432  # Access database at localhost:5432
    networks:
      - default
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin - PostgreSQL management tool (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    env_file: ./backend/.env
    ports:
      - 333:80  # Access pgAdmin at http://localhost:333
                # Login with PGADMIN_DEFAULT_EMAIL and PGADMIN_DEFAULT_PASSWORD from .env
    depends_on:
      - database
    networks:
      - default
    volumes:
      - ./configs/pgadmin-servers.json:/pgadmin4/servers.json:ro

  # Redis for caching and Celery message broker
  redis:
    restart: always
    image: redis:7-alpine
    ports:
      - 6379:6379  # Optional: expose for debugging
    networks:
      - default
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Celery worker for async tasks (document processing, OCR)
  celery_worker:
    image: "fastapi-demo-backend:latest"
    entrypoint: ["./entrypoints/celery_worker.sh"]
    volumes:
      - ./files:/app/files  # Access uploaded files
    depends_on:
      - backend
      - redis
    networks:
      - default
    env_file:
      - ./backend/.env

  # Flower - Celery monitoring tool
  flower:
    image: "fastapi-demo-backend:latest"
    entrypoint: ["./entrypoints/flower.sh"]
    ports:
      - 5555:5555  # Access Flower at http://localhost:5555
    depends_on:
      - redis
      - celery_worker
    env_file:
      - ./backend/.env
    networks:
      - default

networks:
  default:
    driver: bridge

volumes:
  postgres_data: