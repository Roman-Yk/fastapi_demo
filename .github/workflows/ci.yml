name: CI/CD Pipeline

on:
  push:
    branches: ["main", "master"]
  pull_request:
    branches: ["main", "master"]
  workflow_dispatch:  # Allow manual trigger

# Cancel in-progress runs when a new run is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ============================================================================
  # Backend Code Quality Checks
  # ============================================================================
  backend-lint:
    name: Backend Linting & Formatting
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: backend/requirements-dev.txt

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements-dev.txt

      - name: Check code formatting with Black
        working-directory: backend
        run: |
          black --check app tests

      - name: Check import sorting with isort
        working-directory: backend
        run: |
          isort --check-only app tests

      - name: Lint with Ruff
        working-directory: backend
        run: |
          ruff check app tests

  # ============================================================================
  # Backend Type Checking
  # ============================================================================
  backend-typecheck:
    name: Backend Type Checking
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: backend/requirements-dev.txt

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements-dev.txt

      - name: Run MyPy type checker
        working-directory: backend
        run: |
          mypy app --ignore-missing-imports

  # ============================================================================
  # Backend Security Scanning
  # ============================================================================
  backend-security:
    name: Backend Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: backend/requirements-dev.txt

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements-dev.txt

      - name: Run Bandit security scanner
        working-directory: backend
        run: |
          bandit -r app -c pyproject.toml

  # ============================================================================
  # Backend Tests with Multiple Python Versions
  # ============================================================================
  backend-tests:
    name: Backend Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]

    services:
      # PostgreSQL is managed by testcontainers in tests
      # This provides better isolation and works the same locally and in CI

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      # Testcontainers manages PostgreSQL (no need to configure here)
      PYTHONPATH: ${{ github.workspace }}/backend
      REDIS_URL: redis://localhost:6379/0

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: |
            backend/requirements.txt
            backend/requirements-dev.txt

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run tests with coverage
        working-directory: backend
        run: |
          pytest --cov=app --cov-report=xml --cov-report=term-missing -n auto

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        if: matrix.python-version == '3.11'
        with:
          files: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-py${{ matrix.python-version }}
          path: |
            backend/coverage.xml
            backend/htmlcov/
          retention-days: 7

  # ============================================================================
  # Frontend Linting
  # ============================================================================
  frontend-lint:
    name: Frontend Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/demo-app/package-lock.json

      - name: Install dependencies
        working-directory: frontend/demo-app
        run: npm ci

      - name: Run ESLint
        working-directory: frontend/demo-app
        run: npm run lint

      - name: Check TypeScript types
        working-directory: frontend/demo-app
        run: npx tsc --noEmit

  # ============================================================================
  # Frontend Build
  # ============================================================================
  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/demo-app/package-lock.json

      - name: Install dependencies
        working-directory: frontend/demo-app
        run: npm ci

      - name: Build production bundle
        working-directory: frontend/demo-app
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/demo-app/dist
          retention-days: 7

  # ============================================================================
  # All Checks Passed Gate
  # ============================================================================
  all-checks-passed:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs:
      - backend-lint
      - backend-typecheck
      - backend-security
      - backend-tests
      - frontend-lint
      - frontend-build
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          if [ "${{ contains(needs.*.result, 'failure') }}" == "true" ]; then
            echo "❌ Some checks failed"
            exit 1
          elif [ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]; then
            echo "⚠️ Some checks were cancelled"
            exit 1
          else
            echo "✅ All checks passed!"
          fi 